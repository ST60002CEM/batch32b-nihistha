// Mocks generated by Mockito 5.4.4 from annotations
// in adoptapet/test/unit_test/auth_unit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;

import 'package:adoptapet/core/biometric/biometric_auth.dart' as _i2;
import 'package:adoptapet/core/biometric/secure_storage.dart' as _i3;
import 'package:adoptapet/core/error/failure.dart' as _i7;
import 'package:adoptapet/feature/auth/domain/entity/auth_entity.dart' as _i8;
import 'package:adoptapet/feature/auth/domain/usecases/auth_usecases.dart'
    as _i5;
import 'package:adoptapet/feature/auth/presentation/navigator/login_navigator.dart'
    as _i9;
import 'package:adoptapet/feature/pet_details/domain/entity/pet_details_entity.dart'
    as _i11;
import 'package:adoptapet/feature/pet_details/domain/repository/pet_details_repository.dart'
    as _i10;
import 'package:dartz/dartz.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeBiometricAuth_0 extends _i1.SmartFake implements _i2.BiometricAuth {
  _FakeBiometricAuth_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSecureStorage_1 extends _i1.SmartFake implements _i3.SecureStorage {
  _FakeSecureStorage_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeEither_2<L, R> extends _i1.SmartFake implements _i4.Either<L, R> {
  _FakeEither_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [AuthUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthUseCase extends _i1.Mock implements _i5.AuthUseCase {
  @override
  _i2.BiometricAuth get biometricAuth => (super.noSuchMethod(
        Invocation.getter(#biometricAuth),
        returnValue: _FakeBiometricAuth_0(
          this,
          Invocation.getter(#biometricAuth),
        ),
        returnValueForMissingStub: _FakeBiometricAuth_0(
          this,
          Invocation.getter(#biometricAuth),
        ),
      ) as _i2.BiometricAuth);

  @override
  _i3.SecureStorage get secureStorage => (super.noSuchMethod(
        Invocation.getter(#secureStorage),
        returnValue: _FakeSecureStorage_1(
          this,
          Invocation.getter(#secureStorage),
        ),
        returnValueForMissingStub: _FakeSecureStorage_1(
          this,
          Invocation.getter(#secureStorage),
        ),
      ) as _i3.SecureStorage);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> registerUser(
          _i8.AuthEntity? student) =>
      (super.noSuchMethod(
        Invocation.method(
          #registerUser,
          [student],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #registerUser,
            [student],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
                _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #registerUser,
            [student],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> loginUser(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #loginUser,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #loginUser,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
                _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #loginUser,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> call() => (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
                _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> setupFingerprintLogin(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #setupFingerprintLogin,
          [
            email,
            password,
          ],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #setupFingerprintLogin,
            [
              email,
              password,
            ],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
                _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #setupFingerprintLogin,
            [
              email,
              password,
            ],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);

  @override
  _i6.Future<_i4.Either<_i7.Failure, bool>> loginWithFingerprint() =>
      (super.noSuchMethod(
        Invocation.method(
          #loginWithFingerprint,
          [],
        ),
        returnValue: _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
            _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #loginWithFingerprint,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, bool>>.value(
                _FakeEither_2<_i7.Failure, bool>(
          this,
          Invocation.method(
            #loginWithFingerprint,
            [],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, bool>>);
}

/// A class which mocks [LoginViewNavigator].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginViewNavigator extends _i1.Mock
    implements _i9.LoginViewNavigator {}

/// A class which mocks [IPetDetailsRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockIPetDetailsRepository extends _i1.Mock
    implements _i10.IPetDetailsRepository {
  @override
  _i6.Future<_i4.Either<_i7.Failure, _i11.PetDetailsEntity>> getPetDetails(
          String? petId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getPetDetails,
          [petId],
        ),
        returnValue:
            _i6.Future<_i4.Either<_i7.Failure, _i11.PetDetailsEntity>>.value(
                _FakeEither_2<_i7.Failure, _i11.PetDetailsEntity>(
          this,
          Invocation.method(
            #getPetDetails,
            [petId],
          ),
        )),
        returnValueForMissingStub:
            _i6.Future<_i4.Either<_i7.Failure, _i11.PetDetailsEntity>>.value(
                _FakeEither_2<_i7.Failure, _i11.PetDetailsEntity>(
          this,
          Invocation.method(
            #getPetDetails,
            [petId],
          ),
        )),
      ) as _i6.Future<_i4.Either<_i7.Failure, _i11.PetDetailsEntity>>);
}
